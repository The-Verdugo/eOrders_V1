'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace DIS
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="DI ServerSoap", [Namespace]:="http://127.0.0.1/SAP/")>  _
    Partial Public Class DIServer
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private LoginOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoginSSLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LogoutOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private QROperationCompleted As System.Threading.SendOrPostCallback
        
        Private ToolStrToXMLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ToolGetFromXMLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InteractOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BatchInteractOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InteractSOAPCommandOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TokenOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddObjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateObjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RemoveObjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CancelObjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CloseObjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecuteSQLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBPListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBusinessObjectTemplateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBusinessObjectXmlSchemaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetByKeyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetContactEmployeesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCurrenceRateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetItemListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetItemPriceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFieldValidValuesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLocalCurrencyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetObjectKeyBySingleValueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetObjectPermissionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetServiceDatatXmlSchemaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetServiceCallInputXMLSchemaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSystemCurrencyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSystemPermissionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTableFieldListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTableListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWareHouseListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetSystemPermissionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.eOrder.My.MySettings.Default.eOrder_DIS_DI_x0020_Server
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event LoginCompleted As LoginCompletedEventHandler
        
        '''<remarks/>
        Public Event LoginSSLCompleted As LoginSSLCompletedEventHandler
        
        '''<remarks/>
        Public Event LogoutCompleted As LogoutCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidateCompleted As ValidateCompletedEventHandler
        
        '''<remarks/>
        Public Event QRCompleted As QRCompletedEventHandler
        
        '''<remarks/>
        Public Event ToolStrToXMLCompleted As ToolStrToXMLCompletedEventHandler
        
        '''<remarks/>
        Public Event ToolGetFromXMLCompleted As ToolGetFromXMLCompletedEventHandler
        
        '''<remarks/>
        Public Event InteractCompleted As InteractCompletedEventHandler
        
        '''<remarks/>
        Public Event BatchInteractCompleted As BatchInteractCompletedEventHandler
        
        '''<remarks/>
        Public Event InteractSOAPCommandCompleted As InteractSOAPCommandCompletedEventHandler
        
        '''<remarks/>
        Public Event TokenCompleted As TokenCompletedEventHandler
        
        '''<remarks/>
        Public Event AddObjectCompleted As AddObjectCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateObjectCompleted As UpdateObjectCompletedEventHandler
        
        '''<remarks/>
        Public Event RemoveObjectCompleted As RemoveObjectCompletedEventHandler
        
        '''<remarks/>
        Public Event CancelObjectCompleted As CancelObjectCompletedEventHandler
        
        '''<remarks/>
        Public Event CloseObjectCompleted As CloseObjectCompletedEventHandler
        
        '''<remarks/>
        Public Event ExecuteSQLCompleted As ExecuteSQLCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBPListCompleted As GetBPListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBusinessObjectTemplateCompleted As GetBusinessObjectTemplateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBusinessObjectXmlSchemaCompleted As GetBusinessObjectXmlSchemaCompletedEventHandler
        
        '''<remarks/>
        Public Event GetByKeyCompleted As GetByKeyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetContactEmployeesCompleted As GetContactEmployeesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCurrenceRateCompleted As GetCurrenceRateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetItemListCompleted As GetItemListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetItemPriceCompleted As GetItemPriceCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFieldValidValuesCompleted As GetFieldValidValuesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLocalCurrencyCompleted As GetLocalCurrencyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetObjectKeyBySingleValueCompleted As GetObjectKeyBySingleValueCompletedEventHandler
        
        '''<remarks/>
        Public Event GetObjectPermissionCompleted As GetObjectPermissionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetServiceDatatXmlSchemaCompleted As GetServiceDatatXmlSchemaCompletedEventHandler
        
        '''<remarks/>
        Public Event GetServiceCallInputXMLSchemaCompleted As GetServiceCallInputXMLSchemaCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSystemCurrencyCompleted As GetSystemCurrencyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSystemPermissionCompleted As GetSystemPermissionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTableFieldListCompleted As GetTableFieldListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTableListCompleted As GetTableListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserListCompleted As GetUserListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWareHouseListCompleted As GetWareHouseListCompletedEventHandler
        
        '''<remarks/>
        Public Event SetSystemPermissionCompleted As SetSystemPermissionCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/Login", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Login(ByVal DatabaseServer As String, ByVal DatabaseName As String, ByVal DatabaseType As String, ByVal DatabaseUsername As String, ByVal DatabasePassword As String, ByVal CompanyUsername As String, ByVal CompanyPassword As String, ByVal Language As String, ByVal LicenseServer As String) As String
            Dim results() As Object = Me.Invoke("Login", New Object() {DatabaseServer, DatabaseName, DatabaseType, DatabaseUsername, DatabasePassword, CompanyUsername, CompanyPassword, Language, LicenseServer})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoginAsync(ByVal DatabaseServer As String, ByVal DatabaseName As String, ByVal DatabaseType As String, ByVal DatabaseUsername As String, ByVal DatabasePassword As String, ByVal CompanyUsername As String, ByVal CompanyPassword As String, ByVal Language As String, ByVal LicenseServer As String)
            Me.LoginAsync(DatabaseServer, DatabaseName, DatabaseType, DatabaseUsername, DatabasePassword, CompanyUsername, CompanyPassword, Language, LicenseServer, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoginAsync(ByVal DatabaseServer As String, ByVal DatabaseName As String, ByVal DatabaseType As String, ByVal DatabaseUsername As String, ByVal DatabasePassword As String, ByVal CompanyUsername As String, ByVal CompanyPassword As String, ByVal Language As String, ByVal LicenseServer As String, ByVal userState As Object)
            If (Me.LoginOperationCompleted Is Nothing) Then
                Me.LoginOperationCompleted = AddressOf Me.OnLoginOperationCompleted
            End If
            Me.InvokeAsync("Login", New Object() {DatabaseServer, DatabaseName, DatabaseType, DatabaseUsername, DatabasePassword, CompanyUsername, CompanyPassword, Language, LicenseServer}, Me.LoginOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoginOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoginCompleted(Me, New LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/LoginSSL", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoginSSL(ByVal Token As String) As String
            Dim results() As Object = Me.Invoke("LoginSSL", New Object() {Token})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoginSSLAsync(ByVal Token As String)
            Me.LoginSSLAsync(Token, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoginSSLAsync(ByVal Token As String, ByVal userState As Object)
            If (Me.LoginSSLOperationCompleted Is Nothing) Then
                Me.LoginSSLOperationCompleted = AddressOf Me.OnLoginSSLOperationCompleted
            End If
            Me.InvokeAsync("LoginSSL", New Object() {Token}, Me.LoginSSLOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoginSSLOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoginSSLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoginSSLCompleted(Me, New LoginSSLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/Logout", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Logout(ByVal SessionID As String) As String
            Dim results() As Object = Me.Invoke("Logout", New Object() {SessionID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LogoutAsync(ByVal SessionID As String)
            Me.LogoutAsync(SessionID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LogoutAsync(ByVal SessionID As String, ByVal userState As Object)
            If (Me.LogoutOperationCompleted Is Nothing) Then
                Me.LogoutOperationCompleted = AddressOf Me.OnLogoutOperationCompleted
            End If
            Me.InvokeAsync("Logout", New Object() {SessionID}, Me.LogoutOperationCompleted, userState)
        End Sub
        
        Private Sub OnLogoutOperationCompleted(ByVal arg As Object)
            If (Not (Me.LogoutCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LogoutCompleted(Me, New LogoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/Validate", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Validate(ByVal SessionID As String) As String
            Dim results() As Object = Me.Invoke("Validate", New Object() {SessionID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidateAsync(ByVal SessionID As String)
            Me.ValidateAsync(SessionID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidateAsync(ByVal SessionID As String, ByVal userState As Object)
            If (Me.ValidateOperationCompleted Is Nothing) Then
                Me.ValidateOperationCompleted = AddressOf Me.OnValidateOperationCompleted
            End If
            Me.InvokeAsync("Validate", New Object() {SessionID}, Me.ValidateOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidateOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidateCompleted(Me, New ValidateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/QR", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub QR()
            Me.Invoke("QR", New Object(-1) {})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub QRAsync()
            Me.QRAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub QRAsync(ByVal userState As Object)
            If (Me.QROperationCompleted Is Nothing) Then
                Me.QROperationCompleted = AddressOf Me.OnQROperationCompleted
            End If
            Me.InvokeAsync("QR", New Object(-1) {}, Me.QROperationCompleted, userState)
        End Sub
        
        Private Sub OnQROperationCompleted(ByVal arg As Object)
            If (Not (Me.QRCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent QRCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/ToolStrToXML", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ToolStrToXML(ByVal Str As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("ToolStrToXML", New Object() {Str})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ToolStrToXMLAsync(ByVal Str As String)
            Me.ToolStrToXMLAsync(Str, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ToolStrToXMLAsync(ByVal Str As String, ByVal userState As Object)
            If (Me.ToolStrToXMLOperationCompleted Is Nothing) Then
                Me.ToolStrToXMLOperationCompleted = AddressOf Me.OnToolStrToXMLOperationCompleted
            End If
            Me.InvokeAsync("ToolStrToXML", New Object() {Str}, Me.ToolStrToXMLOperationCompleted, userState)
        End Sub
        
        Private Sub OnToolStrToXMLOperationCompleted(ByVal arg As Object)
            If (Not (Me.ToolStrToXMLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ToolStrToXMLCompleted(Me, New ToolStrToXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/ToolGetFromXML", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ToolGetFromXML(ByVal Doc As System.Xml.XmlNode, ByVal TagName As String, ByVal Position As Integer) As String
            Dim results() As Object = Me.Invoke("ToolGetFromXML", New Object() {Doc, TagName, Position})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ToolGetFromXMLAsync(ByVal Doc As System.Xml.XmlNode, ByVal TagName As String, ByVal Position As Integer)
            Me.ToolGetFromXMLAsync(Doc, TagName, Position, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ToolGetFromXMLAsync(ByVal Doc As System.Xml.XmlNode, ByVal TagName As String, ByVal Position As Integer, ByVal userState As Object)
            If (Me.ToolGetFromXMLOperationCompleted Is Nothing) Then
                Me.ToolGetFromXMLOperationCompleted = AddressOf Me.OnToolGetFromXMLOperationCompleted
            End If
            Me.InvokeAsync("ToolGetFromXML", New Object() {Doc, TagName, Position}, Me.ToolGetFromXMLOperationCompleted, userState)
        End Sub
        
        Private Sub OnToolGetFromXMLOperationCompleted(ByVal arg As Object)
            If (Not (Me.ToolGetFromXMLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ToolGetFromXMLCompleted(Me, New ToolGetFromXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/Interact", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Interact(ByVal SOAPCommand As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("Interact", New Object() {SOAPCommand})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InteractAsync(ByVal SOAPCommand As String)
            Me.InteractAsync(SOAPCommand, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InteractAsync(ByVal SOAPCommand As String, ByVal userState As Object)
            If (Me.InteractOperationCompleted Is Nothing) Then
                Me.InteractOperationCompleted = AddressOf Me.OnInteractOperationCompleted
            End If
            Me.InvokeAsync("Interact", New Object() {SOAPCommand}, Me.InteractOperationCompleted, userState)
        End Sub
        
        Private Sub OnInteractOperationCompleted(ByVal arg As Object)
            If (Not (Me.InteractCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InteractCompleted(Me, New InteractCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/BatchInteract", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function BatchInteract(ByVal SOAPCommands As String) As String
            Dim results() As Object = Me.Invoke("BatchInteract", New Object() {SOAPCommands})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BatchInteractAsync(ByVal SOAPCommands As String)
            Me.BatchInteractAsync(SOAPCommands, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BatchInteractAsync(ByVal SOAPCommands As String, ByVal userState As Object)
            If (Me.BatchInteractOperationCompleted Is Nothing) Then
                Me.BatchInteractOperationCompleted = AddressOf Me.OnBatchInteractOperationCompleted
            End If
            Me.InvokeAsync("BatchInteract", New Object() {SOAPCommands}, Me.BatchInteractOperationCompleted, userState)
        End Sub
        
        Private Sub OnBatchInteractOperationCompleted(ByVal arg As Object)
            If (Not (Me.BatchInteractCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BatchInteractCompleted(Me, New BatchInteractCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/InteractSOAPCommand", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InteractSOAPCommand(ByVal SessionID As String, ByVal dis As String, ByVal ServiceName As String, ByVal CommandID As String, ByVal QueryParams As String, ByVal ObjectName As String, ByVal ObjectContent As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("InteractSOAPCommand", New Object() {SessionID, dis, ServiceName, CommandID, QueryParams, ObjectName, ObjectContent})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InteractSOAPCommandAsync(ByVal SessionID As String, ByVal dis As String, ByVal ServiceName As String, ByVal CommandID As String, ByVal QueryParams As String, ByVal ObjectName As String, ByVal ObjectContent As String)
            Me.InteractSOAPCommandAsync(SessionID, dis, ServiceName, CommandID, QueryParams, ObjectName, ObjectContent, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InteractSOAPCommandAsync(ByVal SessionID As String, ByVal dis As String, ByVal ServiceName As String, ByVal CommandID As String, ByVal QueryParams As String, ByVal ObjectName As String, ByVal ObjectContent As String, ByVal userState As Object)
            If (Me.InteractSOAPCommandOperationCompleted Is Nothing) Then
                Me.InteractSOAPCommandOperationCompleted = AddressOf Me.OnInteractSOAPCommandOperationCompleted
            End If
            Me.InvokeAsync("InteractSOAPCommand", New Object() {SessionID, dis, ServiceName, CommandID, QueryParams, ObjectName, ObjectContent}, Me.InteractSOAPCommandOperationCompleted, userState)
        End Sub
        
        Private Sub OnInteractSOAPCommandOperationCompleted(ByVal arg As Object)
            If (Not (Me.InteractSOAPCommandCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InteractSOAPCommandCompleted(Me, New InteractSOAPCommandCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/Token", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Token(ByVal DatabaseServer As String, ByVal DatabaseName As String, ByVal DatabaseType As String, ByVal DatabaseUsername As String, ByVal DatabasePassword As String, ByVal CompanyUsername As String, ByVal CompanyPassword As String, ByVal Language As String, ByVal LicenseServer As String) As String
            Dim results() As Object = Me.Invoke("Token", New Object() {DatabaseServer, DatabaseName, DatabaseType, DatabaseUsername, DatabasePassword, CompanyUsername, CompanyPassword, Language, LicenseServer})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TokenAsync(ByVal DatabaseServer As String, ByVal DatabaseName As String, ByVal DatabaseType As String, ByVal DatabaseUsername As String, ByVal DatabasePassword As String, ByVal CompanyUsername As String, ByVal CompanyPassword As String, ByVal Language As String, ByVal LicenseServer As String)
            Me.TokenAsync(DatabaseServer, DatabaseName, DatabaseType, DatabaseUsername, DatabasePassword, CompanyUsername, CompanyPassword, Language, LicenseServer, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TokenAsync(ByVal DatabaseServer As String, ByVal DatabaseName As String, ByVal DatabaseType As String, ByVal DatabaseUsername As String, ByVal DatabasePassword As String, ByVal CompanyUsername As String, ByVal CompanyPassword As String, ByVal Language As String, ByVal LicenseServer As String, ByVal userState As Object)
            If (Me.TokenOperationCompleted Is Nothing) Then
                Me.TokenOperationCompleted = AddressOf Me.OnTokenOperationCompleted
            End If
            Me.InvokeAsync("Token", New Object() {DatabaseServer, DatabaseName, DatabaseType, DatabaseUsername, DatabasePassword, CompanyUsername, CompanyPassword, Language, LicenseServer}, Me.TokenOperationCompleted, userState)
        End Sub
        
        Private Sub OnTokenOperationCompleted(ByVal arg As Object)
            If (Not (Me.TokenCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TokenCompleted(Me, New TokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/AddObject", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddObject(ByVal SessionID As String, ByVal CommandID As String, ByVal ObjectName As String, ByVal ObjectContent As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("AddObject", New Object() {SessionID, CommandID, ObjectName, ObjectContent})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddObjectAsync(ByVal SessionID As String, ByVal CommandID As String, ByVal ObjectName As String, ByVal ObjectContent As String)
            Me.AddObjectAsync(SessionID, CommandID, ObjectName, ObjectContent, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddObjectAsync(ByVal SessionID As String, ByVal CommandID As String, ByVal ObjectName As String, ByVal ObjectContent As String, ByVal userState As Object)
            If (Me.AddObjectOperationCompleted Is Nothing) Then
                Me.AddObjectOperationCompleted = AddressOf Me.OnAddObjectOperationCompleted
            End If
            Me.InvokeAsync("AddObject", New Object() {SessionID, CommandID, ObjectName, ObjectContent}, Me.AddObjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddObjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddObjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddObjectCompleted(Me, New AddObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/UpdateObject", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateObject(ByVal SessionID As String, ByVal ObjectName As String, ByVal QueryParams As String, ByVal ObjectContent As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UpdateObject", New Object() {SessionID, ObjectName, QueryParams, ObjectContent})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateObjectAsync(ByVal SessionID As String, ByVal ObjectName As String, ByVal QueryParams As String, ByVal ObjectContent As String)
            Me.UpdateObjectAsync(SessionID, ObjectName, QueryParams, ObjectContent, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateObjectAsync(ByVal SessionID As String, ByVal ObjectName As String, ByVal QueryParams As String, ByVal ObjectContent As String, ByVal userState As Object)
            If (Me.UpdateObjectOperationCompleted Is Nothing) Then
                Me.UpdateObjectOperationCompleted = AddressOf Me.OnUpdateObjectOperationCompleted
            End If
            Me.InvokeAsync("UpdateObject", New Object() {SessionID, ObjectName, QueryParams, ObjectContent}, Me.UpdateObjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateObjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateObjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateObjectCompleted(Me, New UpdateObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/RemoveObject", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RemoveObject(ByVal SessionID As String, ByVal ObjectName As String, ByVal QueryParams As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("RemoveObject", New Object() {SessionID, ObjectName, QueryParams})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RemoveObjectAsync(ByVal SessionID As String, ByVal ObjectName As String, ByVal QueryParams As String)
            Me.RemoveObjectAsync(SessionID, ObjectName, QueryParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveObjectAsync(ByVal SessionID As String, ByVal ObjectName As String, ByVal QueryParams As String, ByVal userState As Object)
            If (Me.RemoveObjectOperationCompleted Is Nothing) Then
                Me.RemoveObjectOperationCompleted = AddressOf Me.OnRemoveObjectOperationCompleted
            End If
            Me.InvokeAsync("RemoveObject", New Object() {SessionID, ObjectName, QueryParams}, Me.RemoveObjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnRemoveObjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.RemoveObjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RemoveObjectCompleted(Me, New RemoveObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/CancelObject", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CancelObject(ByVal SessionID As String, ByVal ObjectName As String, ByVal QueryParams As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("CancelObject", New Object() {SessionID, ObjectName, QueryParams})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CancelObjectAsync(ByVal SessionID As String, ByVal ObjectName As String, ByVal QueryParams As String)
            Me.CancelObjectAsync(SessionID, ObjectName, QueryParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CancelObjectAsync(ByVal SessionID As String, ByVal ObjectName As String, ByVal QueryParams As String, ByVal userState As Object)
            If (Me.CancelObjectOperationCompleted Is Nothing) Then
                Me.CancelObjectOperationCompleted = AddressOf Me.OnCancelObjectOperationCompleted
            End If
            Me.InvokeAsync("CancelObject", New Object() {SessionID, ObjectName, QueryParams}, Me.CancelObjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnCancelObjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.CancelObjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CancelObjectCompleted(Me, New CancelObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/CloseObject", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CloseObject(ByVal SessionID As String, ByVal ObjectName As String, ByVal QueryParams As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("CloseObject", New Object() {SessionID, ObjectName, QueryParams})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CloseObjectAsync(ByVal SessionID As String, ByVal ObjectName As String, ByVal QueryParams As String)
            Me.CloseObjectAsync(SessionID, ObjectName, QueryParams, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CloseObjectAsync(ByVal SessionID As String, ByVal ObjectName As String, ByVal QueryParams As String, ByVal userState As Object)
            If (Me.CloseObjectOperationCompleted Is Nothing) Then
                Me.CloseObjectOperationCompleted = AddressOf Me.OnCloseObjectOperationCompleted
            End If
            Me.InvokeAsync("CloseObject", New Object() {SessionID, ObjectName, QueryParams}, Me.CloseObjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnCloseObjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.CloseObjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CloseObjectCompleted(Me, New CloseObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/ExecuteSQL", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExecuteSQL(ByVal SessionID As String, ByVal DoQuery As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("ExecuteSQL", New Object() {SessionID, DoQuery})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExecuteSQLAsync(ByVal SessionID As String, ByVal DoQuery As String)
            Me.ExecuteSQLAsync(SessionID, DoQuery, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecuteSQLAsync(ByVal SessionID As String, ByVal DoQuery As String, ByVal userState As Object)
            If (Me.ExecuteSQLOperationCompleted Is Nothing) Then
                Me.ExecuteSQLOperationCompleted = AddressOf Me.OnExecuteSQLOperationCompleted
            End If
            Me.InvokeAsync("ExecuteSQL", New Object() {SessionID, DoQuery}, Me.ExecuteSQLOperationCompleted, userState)
        End Sub
        
        Private Sub OnExecuteSQLOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecuteSQLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecuteSQLCompleted(Me, New ExecuteSQLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/GetBPList", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBPList(ByVal SessionID As String, ByVal CardType As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetBPList", New Object() {SessionID, CardType})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBPListAsync(ByVal SessionID As String, ByVal CardType As String)
            Me.GetBPListAsync(SessionID, CardType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBPListAsync(ByVal SessionID As String, ByVal CardType As String, ByVal userState As Object)
            If (Me.GetBPListOperationCompleted Is Nothing) Then
                Me.GetBPListOperationCompleted = AddressOf Me.OnGetBPListOperationCompleted
            End If
            Me.InvokeAsync("GetBPList", New Object() {SessionID, CardType}, Me.GetBPListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBPListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBPListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBPListCompleted(Me, New GetBPListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/GetBusinessObjectTemplate", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBusinessObjectTemplate(ByVal SessionID As String, ByVal ObjectName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetBusinessObjectTemplate", New Object() {SessionID, ObjectName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBusinessObjectTemplateAsync(ByVal SessionID As String, ByVal ObjectName As String)
            Me.GetBusinessObjectTemplateAsync(SessionID, ObjectName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBusinessObjectTemplateAsync(ByVal SessionID As String, ByVal ObjectName As String, ByVal userState As Object)
            If (Me.GetBusinessObjectTemplateOperationCompleted Is Nothing) Then
                Me.GetBusinessObjectTemplateOperationCompleted = AddressOf Me.OnGetBusinessObjectTemplateOperationCompleted
            End If
            Me.InvokeAsync("GetBusinessObjectTemplate", New Object() {SessionID, ObjectName}, Me.GetBusinessObjectTemplateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBusinessObjectTemplateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBusinessObjectTemplateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBusinessObjectTemplateCompleted(Me, New GetBusinessObjectTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/GetBusinessObjectXmlSchema", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBusinessObjectXmlSchema(ByVal SessionID As String, ByVal ObjectName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetBusinessObjectXmlSchema", New Object() {SessionID, ObjectName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBusinessObjectXmlSchemaAsync(ByVal SessionID As String, ByVal ObjectName As String)
            Me.GetBusinessObjectXmlSchemaAsync(SessionID, ObjectName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBusinessObjectXmlSchemaAsync(ByVal SessionID As String, ByVal ObjectName As String, ByVal userState As Object)
            If (Me.GetBusinessObjectXmlSchemaOperationCompleted Is Nothing) Then
                Me.GetBusinessObjectXmlSchemaOperationCompleted = AddressOf Me.OnGetBusinessObjectXmlSchemaOperationCompleted
            End If
            Me.InvokeAsync("GetBusinessObjectXmlSchema", New Object() {SessionID, ObjectName}, Me.GetBusinessObjectXmlSchemaOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBusinessObjectXmlSchemaOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBusinessObjectXmlSchemaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBusinessObjectXmlSchemaCompleted(Me, New GetBusinessObjectXmlSchemaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/GetByKey", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetByKey(ByVal SessionID As String, ByVal ObjectName As String, ByVal EntryName As String, ByVal EntryValue As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetByKey", New Object() {SessionID, ObjectName, EntryName, EntryValue})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetByKeyAsync(ByVal SessionID As String, ByVal ObjectName As String, ByVal EntryName As String, ByVal EntryValue As String)
            Me.GetByKeyAsync(SessionID, ObjectName, EntryName, EntryValue, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetByKeyAsync(ByVal SessionID As String, ByVal ObjectName As String, ByVal EntryName As String, ByVal EntryValue As String, ByVal userState As Object)
            If (Me.GetByKeyOperationCompleted Is Nothing) Then
                Me.GetByKeyOperationCompleted = AddressOf Me.OnGetByKeyOperationCompleted
            End If
            Me.InvokeAsync("GetByKey", New Object() {SessionID, ObjectName, EntryName, EntryValue}, Me.GetByKeyOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetByKeyOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetByKeyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetByKeyCompleted(Me, New GetByKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/GetContactEmployees", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetContactEmployees(ByVal SessionID As String, ByVal CardCode As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetContactEmployees", New Object() {SessionID, CardCode})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetContactEmployeesAsync(ByVal SessionID As String, ByVal CardCode As String)
            Me.GetContactEmployeesAsync(SessionID, CardCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetContactEmployeesAsync(ByVal SessionID As String, ByVal CardCode As String, ByVal userState As Object)
            If (Me.GetContactEmployeesOperationCompleted Is Nothing) Then
                Me.GetContactEmployeesOperationCompleted = AddressOf Me.OnGetContactEmployeesOperationCompleted
            End If
            Me.InvokeAsync("GetContactEmployees", New Object() {SessionID, CardCode}, Me.GetContactEmployeesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetContactEmployeesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetContactEmployeesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetContactEmployeesCompleted(Me, New GetContactEmployeesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/GetCurrenceRate", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCurrenceRate(ByVal SessionID As String, ByVal Currency As String, ByVal DateValue As Date) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetCurrenceRate", New Object() {SessionID, Currency, DateValue})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCurrenceRateAsync(ByVal SessionID As String, ByVal Currency As String, ByVal DateValue As Date)
            Me.GetCurrenceRateAsync(SessionID, Currency, DateValue, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCurrenceRateAsync(ByVal SessionID As String, ByVal Currency As String, ByVal DateValue As Date, ByVal userState As Object)
            If (Me.GetCurrenceRateOperationCompleted Is Nothing) Then
                Me.GetCurrenceRateOperationCompleted = AddressOf Me.OnGetCurrenceRateOperationCompleted
            End If
            Me.InvokeAsync("GetCurrenceRate", New Object() {SessionID, Currency, DateValue}, Me.GetCurrenceRateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCurrenceRateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCurrenceRateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCurrenceRateCompleted(Me, New GetCurrenceRateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/GetItemList", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetItemList(ByVal SessionID As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetItemList", New Object() {SessionID})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetItemListAsync(ByVal SessionID As String)
            Me.GetItemListAsync(SessionID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetItemListAsync(ByVal SessionID As String, ByVal userState As Object)
            If (Me.GetItemListOperationCompleted Is Nothing) Then
                Me.GetItemListOperationCompleted = AddressOf Me.OnGetItemListOperationCompleted
            End If
            Me.InvokeAsync("GetItemList", New Object() {SessionID}, Me.GetItemListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetItemListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetItemListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetItemListCompleted(Me, New GetItemListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/GetItemPrice", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetItemPrice(ByVal SessionID As String, ByVal CardCode As String, ByVal ItemCode As String, ByVal Quantity As Integer, ByVal DateValue As Date) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetItemPrice", New Object() {SessionID, CardCode, ItemCode, Quantity, DateValue})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetItemPriceAsync(ByVal SessionID As String, ByVal CardCode As String, ByVal ItemCode As String, ByVal Quantity As Integer, ByVal DateValue As Date)
            Me.GetItemPriceAsync(SessionID, CardCode, ItemCode, Quantity, DateValue, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetItemPriceAsync(ByVal SessionID As String, ByVal CardCode As String, ByVal ItemCode As String, ByVal Quantity As Integer, ByVal DateValue As Date, ByVal userState As Object)
            If (Me.GetItemPriceOperationCompleted Is Nothing) Then
                Me.GetItemPriceOperationCompleted = AddressOf Me.OnGetItemPriceOperationCompleted
            End If
            Me.InvokeAsync("GetItemPrice", New Object() {SessionID, CardCode, ItemCode, Quantity, DateValue}, Me.GetItemPriceOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetItemPriceOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetItemPriceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetItemPriceCompleted(Me, New GetItemPriceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/GetFieldValidValues", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFieldValidValues(ByVal SessionID As String, ByVal TableName As String, ByVal FieldName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetFieldValidValues", New Object() {SessionID, TableName, FieldName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFieldValidValuesAsync(ByVal SessionID As String, ByVal TableName As String, ByVal FieldName As String)
            Me.GetFieldValidValuesAsync(SessionID, TableName, FieldName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFieldValidValuesAsync(ByVal SessionID As String, ByVal TableName As String, ByVal FieldName As String, ByVal userState As Object)
            If (Me.GetFieldValidValuesOperationCompleted Is Nothing) Then
                Me.GetFieldValidValuesOperationCompleted = AddressOf Me.OnGetFieldValidValuesOperationCompleted
            End If
            Me.InvokeAsync("GetFieldValidValues", New Object() {SessionID, TableName, FieldName}, Me.GetFieldValidValuesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFieldValidValuesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFieldValidValuesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFieldValidValuesCompleted(Me, New GetFieldValidValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/GetLocalCurrency", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLocalCurrency(ByVal SessionID As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetLocalCurrency", New Object() {SessionID})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLocalCurrencyAsync(ByVal SessionID As String)
            Me.GetLocalCurrencyAsync(SessionID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLocalCurrencyAsync(ByVal SessionID As String, ByVal userState As Object)
            If (Me.GetLocalCurrencyOperationCompleted Is Nothing) Then
                Me.GetLocalCurrencyOperationCompleted = AddressOf Me.OnGetLocalCurrencyOperationCompleted
            End If
            Me.InvokeAsync("GetLocalCurrency", New Object() {SessionID}, Me.GetLocalCurrencyOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLocalCurrencyOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLocalCurrencyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLocalCurrencyCompleted(Me, New GetLocalCurrencyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/GetObjectKeyBySingleValue", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetObjectKeyBySingleValue(ByVal SessionID As String, ByVal ObjectName As String, ByVal PropName As String, ByVal PropValue As String, ByVal Condition As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetObjectKeyBySingleValue", New Object() {SessionID, ObjectName, PropName, PropValue, Condition})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetObjectKeyBySingleValueAsync(ByVal SessionID As String, ByVal ObjectName As String, ByVal PropName As String, ByVal PropValue As String, ByVal Condition As String)
            Me.GetObjectKeyBySingleValueAsync(SessionID, ObjectName, PropName, PropValue, Condition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetObjectKeyBySingleValueAsync(ByVal SessionID As String, ByVal ObjectName As String, ByVal PropName As String, ByVal PropValue As String, ByVal Condition As String, ByVal userState As Object)
            If (Me.GetObjectKeyBySingleValueOperationCompleted Is Nothing) Then
                Me.GetObjectKeyBySingleValueOperationCompleted = AddressOf Me.OnGetObjectKeyBySingleValueOperationCompleted
            End If
            Me.InvokeAsync("GetObjectKeyBySingleValue", New Object() {SessionID, ObjectName, PropName, PropValue, Condition}, Me.GetObjectKeyBySingleValueOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetObjectKeyBySingleValueOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetObjectKeyBySingleValueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetObjectKeyBySingleValueCompleted(Me, New GetObjectKeyBySingleValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/GetObjectPermission", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetObjectPermission(ByVal SessionID As String, ByVal ObjectName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetObjectPermission", New Object() {SessionID, ObjectName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetObjectPermissionAsync(ByVal SessionID As String, ByVal ObjectName As String)
            Me.GetObjectPermissionAsync(SessionID, ObjectName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetObjectPermissionAsync(ByVal SessionID As String, ByVal ObjectName As String, ByVal userState As Object)
            If (Me.GetObjectPermissionOperationCompleted Is Nothing) Then
                Me.GetObjectPermissionOperationCompleted = AddressOf Me.OnGetObjectPermissionOperationCompleted
            End If
            Me.InvokeAsync("GetObjectPermission", New Object() {SessionID, ObjectName}, Me.GetObjectPermissionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetObjectPermissionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetObjectPermissionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetObjectPermissionCompleted(Me, New GetObjectPermissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/GetServiceDatatXmlSchema", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetServiceDatatXmlSchema(ByVal SessionID As String, ByVal Service As String, ByVal Data As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetServiceDatatXmlSchema", New Object() {SessionID, Service, Data})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetServiceDatatXmlSchemaAsync(ByVal SessionID As String, ByVal Service As String, ByVal Data As String)
            Me.GetServiceDatatXmlSchemaAsync(SessionID, Service, Data, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetServiceDatatXmlSchemaAsync(ByVal SessionID As String, ByVal Service As String, ByVal Data As String, ByVal userState As Object)
            If (Me.GetServiceDatatXmlSchemaOperationCompleted Is Nothing) Then
                Me.GetServiceDatatXmlSchemaOperationCompleted = AddressOf Me.OnGetServiceDatatXmlSchemaOperationCompleted
            End If
            Me.InvokeAsync("GetServiceDatatXmlSchema", New Object() {SessionID, Service, Data}, Me.GetServiceDatatXmlSchemaOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetServiceDatatXmlSchemaOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetServiceDatatXmlSchemaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetServiceDatatXmlSchemaCompleted(Me, New GetServiceDatatXmlSchemaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/GetServiceCallInputXMLSchema", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetServiceCallInputXMLSchema(ByVal SessionID As String, ByVal Command As String, ByVal Service As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetServiceCallInputXMLSchema", New Object() {SessionID, Command, Service})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetServiceCallInputXMLSchemaAsync(ByVal SessionID As String, ByVal Command As String, ByVal Service As String)
            Me.GetServiceCallInputXMLSchemaAsync(SessionID, Command, Service, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetServiceCallInputXMLSchemaAsync(ByVal SessionID As String, ByVal Command As String, ByVal Service As String, ByVal userState As Object)
            If (Me.GetServiceCallInputXMLSchemaOperationCompleted Is Nothing) Then
                Me.GetServiceCallInputXMLSchemaOperationCompleted = AddressOf Me.OnGetServiceCallInputXMLSchemaOperationCompleted
            End If
            Me.InvokeAsync("GetServiceCallInputXMLSchema", New Object() {SessionID, Command, Service}, Me.GetServiceCallInputXMLSchemaOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetServiceCallInputXMLSchemaOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetServiceCallInputXMLSchemaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetServiceCallInputXMLSchemaCompleted(Me, New GetServiceCallInputXMLSchemaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/GetSystemCurrency", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSystemCurrency(ByVal SessionID As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetSystemCurrency", New Object() {SessionID})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSystemCurrencyAsync(ByVal SessionID As String)
            Me.GetSystemCurrencyAsync(SessionID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSystemCurrencyAsync(ByVal SessionID As String, ByVal userState As Object)
            If (Me.GetSystemCurrencyOperationCompleted Is Nothing) Then
                Me.GetSystemCurrencyOperationCompleted = AddressOf Me.OnGetSystemCurrencyOperationCompleted
            End If
            Me.InvokeAsync("GetSystemCurrency", New Object() {SessionID}, Me.GetSystemCurrencyOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSystemCurrencyOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSystemCurrencyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSystemCurrencyCompleted(Me, New GetSystemCurrencyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/GetSystemPermission", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSystemPermission(ByVal SessionID As String, ByVal UserName As String, ByVal PermissionID As Integer) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetSystemPermission", New Object() {SessionID, UserName, PermissionID})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSystemPermissionAsync(ByVal SessionID As String, ByVal UserName As String, ByVal PermissionID As Integer)
            Me.GetSystemPermissionAsync(SessionID, UserName, PermissionID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSystemPermissionAsync(ByVal SessionID As String, ByVal UserName As String, ByVal PermissionID As Integer, ByVal userState As Object)
            If (Me.GetSystemPermissionOperationCompleted Is Nothing) Then
                Me.GetSystemPermissionOperationCompleted = AddressOf Me.OnGetSystemPermissionOperationCompleted
            End If
            Me.InvokeAsync("GetSystemPermission", New Object() {SessionID, UserName, PermissionID}, Me.GetSystemPermissionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSystemPermissionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSystemPermissionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSystemPermissionCompleted(Me, New GetSystemPermissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/GetTableFieldList", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTableFieldList(ByVal SessionID As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetTableFieldList", New Object() {SessionID})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTableFieldListAsync(ByVal SessionID As String)
            Me.GetTableFieldListAsync(SessionID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTableFieldListAsync(ByVal SessionID As String, ByVal userState As Object)
            If (Me.GetTableFieldListOperationCompleted Is Nothing) Then
                Me.GetTableFieldListOperationCompleted = AddressOf Me.OnGetTableFieldListOperationCompleted
            End If
            Me.InvokeAsync("GetTableFieldList", New Object() {SessionID}, Me.GetTableFieldListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTableFieldListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTableFieldListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTableFieldListCompleted(Me, New GetTableFieldListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/GetTableList", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTableList(ByVal SessionID As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetTableList", New Object() {SessionID})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTableListAsync(ByVal SessionID As String)
            Me.GetTableListAsync(SessionID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTableListAsync(ByVal SessionID As String, ByVal userState As Object)
            If (Me.GetTableListOperationCompleted Is Nothing) Then
                Me.GetTableListOperationCompleted = AddressOf Me.OnGetTableListOperationCompleted
            End If
            Me.InvokeAsync("GetTableList", New Object() {SessionID}, Me.GetTableListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTableListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTableListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTableListCompleted(Me, New GetTableListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/GetUserList", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserList(ByVal SessionID As String, ByVal CardType As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetUserList", New Object() {SessionID, CardType})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserListAsync(ByVal SessionID As String, ByVal CardType As String)
            Me.GetUserListAsync(SessionID, CardType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserListAsync(ByVal SessionID As String, ByVal CardType As String, ByVal userState As Object)
            If (Me.GetUserListOperationCompleted Is Nothing) Then
                Me.GetUserListOperationCompleted = AddressOf Me.OnGetUserListOperationCompleted
            End If
            Me.InvokeAsync("GetUserList", New Object() {SessionID, CardType}, Me.GetUserListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserListCompleted(Me, New GetUserListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/GetWareHouseList", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWareHouseList(ByVal SessionID As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetWareHouseList", New Object() {SessionID})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWareHouseListAsync(ByVal SessionID As String)
            Me.GetWareHouseListAsync(SessionID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWareHouseListAsync(ByVal SessionID As String, ByVal userState As Object)
            If (Me.GetWareHouseListOperationCompleted Is Nothing) Then
                Me.GetWareHouseListOperationCompleted = AddressOf Me.OnGetWareHouseListOperationCompleted
            End If
            Me.InvokeAsync("GetWareHouseList", New Object() {SessionID}, Me.GetWareHouseListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWareHouseListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWareHouseListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWareHouseListCompleted(Me, New GetWareHouseListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://127.0.0.1/SAP/SetSystemPermission", RequestNamespace:="http://127.0.0.1/SAP/", ResponseNamespace:="http://127.0.0.1/SAP/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetSystemPermission(ByVal SessionID As String, ByVal UserName As String, ByVal PermissionID As Integer, ByVal Permission As Integer) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("SetSystemPermission", New Object() {SessionID, UserName, PermissionID, Permission})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetSystemPermissionAsync(ByVal SessionID As String, ByVal UserName As String, ByVal PermissionID As Integer, ByVal Permission As Integer)
            Me.SetSystemPermissionAsync(SessionID, UserName, PermissionID, Permission, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetSystemPermissionAsync(ByVal SessionID As String, ByVal UserName As String, ByVal PermissionID As Integer, ByVal Permission As Integer, ByVal userState As Object)
            If (Me.SetSystemPermissionOperationCompleted Is Nothing) Then
                Me.SetSystemPermissionOperationCompleted = AddressOf Me.OnSetSystemPermissionOperationCompleted
            End If
            Me.InvokeAsync("SetSystemPermission", New Object() {SessionID, UserName, PermissionID, Permission}, Me.SetSystemPermissionOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetSystemPermissionOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetSystemPermissionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetSystemPermissionCompleted(Me, New SetSystemPermissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub LoginCompletedEventHandler(ByVal sender As Object, ByVal e As LoginCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub LoginSSLCompletedEventHandler(ByVal sender As Object, ByVal e As LoginSSLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoginSSLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub LogoutCompletedEventHandler(ByVal sender As Object, ByVal e As LogoutCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LogoutCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub ValidateCompletedEventHandler(ByVal sender As Object, ByVal e As ValidateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub QRCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub ToolStrToXMLCompletedEventHandler(ByVal sender As Object, ByVal e As ToolStrToXMLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ToolStrToXMLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub ToolGetFromXMLCompletedEventHandler(ByVal sender As Object, ByVal e As ToolGetFromXMLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ToolGetFromXMLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub InteractCompletedEventHandler(ByVal sender As Object, ByVal e As InteractCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InteractCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub BatchInteractCompletedEventHandler(ByVal sender As Object, ByVal e As BatchInteractCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BatchInteractCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub InteractSOAPCommandCompletedEventHandler(ByVal sender As Object, ByVal e As InteractSOAPCommandCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InteractSOAPCommandCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub TokenCompletedEventHandler(ByVal sender As Object, ByVal e As TokenCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TokenCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub AddObjectCompletedEventHandler(ByVal sender As Object, ByVal e As AddObjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddObjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub UpdateObjectCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateObjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateObjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub RemoveObjectCompletedEventHandler(ByVal sender As Object, ByVal e As RemoveObjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RemoveObjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub CancelObjectCompletedEventHandler(ByVal sender As Object, ByVal e As CancelObjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CancelObjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub CloseObjectCompletedEventHandler(ByVal sender As Object, ByVal e As CloseObjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CloseObjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub ExecuteSQLCompletedEventHandler(ByVal sender As Object, ByVal e As ExecuteSQLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecuteSQLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub GetBPListCompletedEventHandler(ByVal sender As Object, ByVal e As GetBPListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBPListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub GetBusinessObjectTemplateCompletedEventHandler(ByVal sender As Object, ByVal e As GetBusinessObjectTemplateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBusinessObjectTemplateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub GetBusinessObjectXmlSchemaCompletedEventHandler(ByVal sender As Object, ByVal e As GetBusinessObjectXmlSchemaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBusinessObjectXmlSchemaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub GetByKeyCompletedEventHandler(ByVal sender As Object, ByVal e As GetByKeyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetByKeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub GetContactEmployeesCompletedEventHandler(ByVal sender As Object, ByVal e As GetContactEmployeesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetContactEmployeesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub GetCurrenceRateCompletedEventHandler(ByVal sender As Object, ByVal e As GetCurrenceRateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCurrenceRateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub GetItemListCompletedEventHandler(ByVal sender As Object, ByVal e As GetItemListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetItemListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub GetItemPriceCompletedEventHandler(ByVal sender As Object, ByVal e As GetItemPriceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetItemPriceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub GetFieldValidValuesCompletedEventHandler(ByVal sender As Object, ByVal e As GetFieldValidValuesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFieldValidValuesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub GetLocalCurrencyCompletedEventHandler(ByVal sender As Object, ByVal e As GetLocalCurrencyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLocalCurrencyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub GetObjectKeyBySingleValueCompletedEventHandler(ByVal sender As Object, ByVal e As GetObjectKeyBySingleValueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetObjectKeyBySingleValueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub GetObjectPermissionCompletedEventHandler(ByVal sender As Object, ByVal e As GetObjectPermissionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetObjectPermissionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub GetServiceDatatXmlSchemaCompletedEventHandler(ByVal sender As Object, ByVal e As GetServiceDatatXmlSchemaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetServiceDatatXmlSchemaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub GetServiceCallInputXMLSchemaCompletedEventHandler(ByVal sender As Object, ByVal e As GetServiceCallInputXMLSchemaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetServiceCallInputXMLSchemaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub GetSystemCurrencyCompletedEventHandler(ByVal sender As Object, ByVal e As GetSystemCurrencyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSystemCurrencyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub GetSystemPermissionCompletedEventHandler(ByVal sender As Object, ByVal e As GetSystemPermissionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSystemPermissionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub GetTableFieldListCompletedEventHandler(ByVal sender As Object, ByVal e As GetTableFieldListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTableFieldListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub GetTableListCompletedEventHandler(ByVal sender As Object, ByVal e As GetTableListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTableListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub GetUserListCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub GetWareHouseListCompletedEventHandler(ByVal sender As Object, ByVal e As GetWareHouseListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWareHouseListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")>  _
    Public Delegate Sub SetSystemPermissionCompletedEventHandler(ByVal sender As Object, ByVal e As SetSystemPermissionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetSystemPermissionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
End Namespace
